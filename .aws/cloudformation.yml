AWSTemplateFormatVersion: "2010-09-09"
Description: ECS service setup for running it on a cluster using application load balancer

Parameters:
  EnvironmentName:
    Description: The name of the environment
    Type: String
    Default: stg
    AllowedValues:
      - stg
      - prd
    ConstraintDescription: Please choose a valid instance type.

  ServiceName:
    Description: The name of the service to be created
    Type: String
    Default: boilerplate

  ServiceDatabaseName:
      Description: The name of the service database
      Type: String
      Default: boilerplate
  
  ContainerPort:
    Description: What port number the application inside the docker container is binding to
    Type: Number
    Default: 8080

  ContainerCpu:
    Type: Number
    Default: 128
    Description: How much CPU to give the container. 1024 is 1 CPU

  ContainerMemory:
    Type: Number
    Default: 128
    Description: How much memory in megabytes to give the container
  
  RevisionNumber:
    Type: String
    Default: latest
    Description: Git commit slug used as a container tag

  SentryProjectDSN:
    Type: String
    Default: 0
    Description: Sentry project id for error tracking and tracing

Mappings:
  EnvironmentNameToParamsMappings:
    stg:
      LogGroupRetentionInDays: 30
      ContainerEnvAppRootUrl: "https://stg.yapsody.events"
      ContainerEnvApiRootUrl: "https://stg-be.yapsody.events"
    prd:
      LogGroupRetentionInDays: 90
      ContainerEnvAppRootUrl: "https://yapsody.events"
      ContainerEnvApiRootUrl: "https://be.yapsody.events"

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "ed-${EnvironmentName}-${ServiceName}"
      RetentionInDays: !FindInMap [EnvironmentNameToParamsMappings, !Ref EnvironmentName, LogGroupRetentionInDays]

    
  ServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Sub "ed-${ServiceName}"
      NamespaceId: 
        Fn::ImportValue: !Sub "ed-${EnvironmentName}:NamespaceID"
      DnsConfig:
        RoutingPolicy: "MULTIVALUE"
        DnsRecords:
          - Type: "SRV"
            TTL: "60"
      HealthCheckCustomConfig:
        FailureThreshold: "1"
  

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      UnhealthyThresholdCount: 3
      Name: !Sub "ed-${EnvironmentName}-${ServiceName}"
      Port: !Ref "ContainerPort"
      Protocol: TCP
      TargetType: "instance"
      VpcId:
        Fn::ImportValue:
          !Sub "ed-${EnvironmentName}:VpcId"
      Tags: 
        - Key: "project"
          Value: !Sub "ed-${EnvironmentName}"

  DeadLetterQueue: 
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentName}-${ServiceName}-dlq"
      MessageRetentionPeriod: 1209600

  DeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-${ServiceName}-dlq-alarm"
      AlarmDescription: !Sub "SQS DLQ Alarm for ed-${EnvironmentName}-${ServiceName}"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateAgeOfOldestMessage"
      Dimensions:
      - Name: "QueueName"
        Value: !GetAtt DeadLetterQueue.QueueName
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 1
      EvaluationPeriods: 1
      Period: 60
      TreatMissingData: "missing"
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:ed-alarms"



  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentName}-${ServiceName}-queue"
      RedrivePolicy: 
        deadLetterTargetArn: 
          Fn::GetAtt: 
            - "DeadLetterQueue"
            - "Arn"
        maxReceiveCount: 5

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt SQSQueue.Arn
      Region: !Sub "${AWS::Region}"
      TopicArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${EnvironmentName}-events-topic"
      RawMessageDelivery: true
      FilterPolicy: "{\"type\":[\"CreateRandomNotesActivity\", \"GenerateSitemapXml\"]}"

  SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Statement:
          - Action:
              - "SQS:SendMessage"
            Effect: Allow
            Resource: !GetAtt SQSQueue.Arn
            Principal: "*"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${EnvironmentName}-events-topic"


  IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "ed-${EnvironmentName}-${ServiceName}-role"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service: 
                - ecs-tasks.amazonaws.com
            Action:
                - "sts:AssumeRole"
      Description: !Sub "Role for TaskDefinition ${EnvironmentName}-${ServiceName}"
      MaxSessionDuration: 3600
      Path: /
      Tags:
        - Key: project
          Value: !Sub "ed-${EnvironmentName}"
        - Key: service
          Value: !Sub "ed-${EnvironmentName}-${ServiceName}"    

  IamPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "ed-${EnvironmentName}-${ServiceName}-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
            Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${EnvironmentName}-events-topic"
          - Effect: Allow
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:DeleteMessageBatch"
              - "sqs:ChangeMessageVisibility"
              - "sqs:ChangeMessageVisibilityBatch"
            Resource:
              - !GetAtt SQSQueue.Arn
          - Effect: Allow
            Action:
              - "sqs:SendMessage"
              - "sqs:SendMessageBatch"
            Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${EnvironmentName}-ed-bg-activities-queue"
              
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::ed-${EnvironmentName}-sitemap/sitemaps*"
              - "arn:aws:s3:::ed-sitemaps/sitemaps*"          

      Roles: 
        - !Ref IamRole 

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "ed-${EnvironmentName}:LoadBalancerARN"
      Protocol: TCP
      Port: !Ref "ContainerPort"
      DefaultActions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
          Order : 1

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: 
      - SQSQueue
      - IamRole
    Properties:
      Family: !Sub "ed-${EnvironmentName}-${ServiceName}"
      RequiresCompatibilities:
        - EC2
      TaskRoleArn: !GetAtt [IamRole, Arn]
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ed_ECS_TaskExecutionRole"
      ContainerDefinitions:
        - Name: !Sub "ed-${EnvironmentName}-${ServiceName}"
          Cpu: !Ref "ContainerCpu"
          MemoryReservation: !Ref "ContainerMemory"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}:${RevisionNumber}"
          Privileged: false
          ReadonlyRootFilesystem: true
          User: "node"
          DockerSecurityOptions:
            - "apparmor:docker-default"
          DockerLabels:
            com.datadoghq.tags.env: !Sub "ed-${EnvironmentName}"
            com.datadoghq.tags.service: !Ref "ServiceName"
            com.datadoghq.tags.version: !Ref "RevisionNumber"
          EntryPoint: ["sh", "-c", "export DD_AGENT_HOST=$(cat $ECS_CONTAINER_METADATA_FILE | jq -r .HostPrivateIPv4Address); node ./src/app.js"]
          PortMappings:
            - ContainerPort: !Ref "ContainerPort"
              HostPort: "0"
              Protocol: "tcp"
          Environment:
            - Name: "ENVIRONMENT"
              Value: !Sub "ed-${EnvironmentName}"
            - Name: "DD_ENV"
              Value: !Sub "ed-${EnvironmentName}"
            - Name: "DD_SERVICE"
              Value: !Ref "ServiceName"
            - Name: "DD_VERSION"
              Value: !Ref "RevisionNumber"
            - Name: "MICROSERVICE_NAME"
              Value: !Ref "ServiceName"
            - Name: "MICROSERVICE_TYPE"
              Value: !Sub "com.yapsody.${ServiceName}"
            - Name: "APP_PORT"
              Value: !Ref "ContainerPort"
            - Name: "MYSQL_DB_NAME"
              Value: !Ref "ServiceDatabaseName"
            - Name: "APP_HOST"
              Value: "0.0.0.0"
            - Name: "AWS_REGION"
              Value: !Ref "AWS::Region"
            - Name: "SENTRY_PROJECT_DSN"
              Value: !Ref "SentryProjectDSN"
            - Name: "AWS_SQS_ENDPOINT"
              Value: !Ref "SQSQueue"
          Secrets:
            - { Name: "MYSQL_HOST", ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ed_${EnvironmentName}_db_mysql_host" }
            - { Name: "MYSQL_PASSWORD", ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ed_${EnvironmentName}_db_mysql_password" }
            - { Name: "MYSQL_USERNAME", ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ed_${EnvironmentName}_db_mysql_user" }
            - { Name: "AWS_BUCKET_NAME", ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ed-${EnvironmentName}-sitemap" }
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub "ed-${EnvironmentName}-${ServiceName}"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"
      #Tags: 
      #  - Key: "project"
      #    Value: !Sub "ed-${EnvironmentName}"
          

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ServiceDiscovery
      - TaskDefinition
      - TargetGroup
    Properties:
      ServiceName: !Ref "ServiceName"
      Cluster: !Sub "ed-${EnvironmentName}-cluster"
      LaunchType: "EC2"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: "1"
      TaskDefinition: !Ref "TaskDefinition"
      PropagateTags: TASK_DEFINITION
      LoadBalancers:
        - ContainerName: !Sub "ed-${EnvironmentName}-${ServiceName}"
          ContainerPort: !Ref "ContainerPort"
          TargetGroupArn: !Ref "TargetGroup"
      ServiceRegistries:
        - RegistryArn: !GetAtt "ServiceDiscovery.Arn"
          ContainerName: !Sub "ed-${EnvironmentName}-${ServiceName}"
          ContainerPort: !Ref "ContainerPort"
      #Tags: 
      #  - Key: "project"
      #    Value: !Sub "ed-${EnvironmentName}"
